# name: Moonshot Testing

# on:
#   push:
#     branches:
#       - main

# permissions:
#   id-token: write
#   contents: read
#   packages: read

# jobs:
#   run-moonshot-in-ci:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Build Quart Docker image
#         run: docker build -t quart-app:latest .

#       - name: Run Quart container
#         run: |
#           docker run -d --name quart-app -p 3123:3123 quart-app:latest
#           echo "Quart container started"

#       - name: Wait for Quart server to be up
#         run: |
#           for i in {1..10}; do
#             if curl -s -f http://localhost:3123/; then
#               echo "Quart ready"
#               break
#             fi
#             sleep 2
#           done

#       - name: Azure CLI login
#         uses: azure/login@v2
#         with:
#           client-id: ${{ secrets.AZURE_CLIENT_ID }}
#           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#           client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
#           allow-no-subscriptions: true

#       - name: Login to Azure Container Registry
#         env:
#           MS_ACR_NAME: ${{ secrets.MS_ACR_NAME }}
#         run: |
#           az acr login --name $MS_ACR_NAME

#       - name: Pull Moonshot container from ACR
#         env:
#           MS_DOCKER_IMAGE: ${{ secrets.MS_DOCKER_IMAGE }}
#         run: docker pull "$MS_DOCKER_IMAGE"

#       - name: Run Moonshot
#         env:
#           OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
#           AZURE_BLOB_STORAGE_URL: ${{ secrets.AZURE_BLOB_STORAGE_URL }}
#           AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#           AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#           AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#           MS_TEST_CONFIG_PATH: ${{ secrets.AZURE_MS_TEST_CONFIG_PATH }}
#           MS_CONFIG_PATH: ${{ secrets.AZURE_MS_CONFIG_PATH }}
#           MS_DOCKER_IMAGE: ${{ secrets.MS_DOCKER_IMAGE }}
#         run: |
#           RUN_ID="moonshot-testing-run-$(date +'%m%d%y-%H%M')"
#           echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

#           docker run --rm \
#             --network host \
#             -e OPENAI_API_KEY \
#             -e AZURE_BLOB_STORAGE_URL \
#             -e AZURE_CLIENT_ID \
#             -e AZURE_TENANT_ID \
#             -e AZURE_CLIENT_SECRET \
#             -e MS_TEST_CONFIG_PATH \
#             -e MS_CONFIG_PATH \
#             -e RUN_ID \
#             -v $GITHUB_WORKSPACE/results:/app/data/results \
#             "$MS_DOCKER_IMAGE" \
#             moonshot run "$RUN_ID" qa-tests my-custom-connector

#       - name: Show result logs
#         run: |
#           if [ -f "$GITHUB_WORKSPACE/results/$RUN_ID.json" ]; then
#             cat "$GITHUB_WORKSPACE/results/$RUN_ID.json"
#           else
#             echo "File not found: $GITHUB_WORKSPACE/results/$RUN_ID.json"
#             ls -l "$GITHUB_WORKSPACE/results"
#           fi

#       - name: Summarize test results
#         run: python3 .github/scripts/summarize_results.py >> $GITHUB_STEP_SUMMARY
#         env:
#           RUN_ID: ${{ env.RUN_ID }}
#           GITHUB_WORKSPACE: ${{ github.workspace }}

#       - name: Upload Moonshot Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: results/*

name: Moonshot Testing

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: read

jobs:
  run-moonshot-in-ci:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure CLI login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          allow-no-subscriptions: true

      - name: Login to ACR
        run: az acr login --name ${{ secrets.MS_ACR_NAME }}

      - name: Pull Moonshot container
        run: docker pull ${{ secrets.MS_DOCKER_IMAGE }}

      - name: Set RUN_ID
        run: echo "RUN_ID=moonshot-testing-run-$(date +'%m%d%y-%H%M')" >> $GITHUB_ENV

      - name: Run Moonshot tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          AZURE_BLOB_STORAGE_URL: ${{ secrets.AZURE_BLOB_STORAGE_URL }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          MS_TEST_CONFIG_PATH: ${{ secrets.AZURE_MS_TEST_CONFIG_PATH }}
          MS_CONFIG_PATH: ${{ secrets.AZURE_MS_CONFIG_PATH }}
          MS_DOCKER_IMAGE: ${{ secrets.MS_DOCKER_IMAGE }}
        run: |
          docker run --rm \
            -e OPENAI_API_KEY \
            -e AZURE_BLOB_STORAGE_URL \
            -e AZURE_CLIENT_ID \
            -e AZURE_TENANT_ID \
            -e AZURE_CLIENT_SECRET \
            -e MS_TEST_CONFIG_PATH \
            -e MS_CONFIG_PATH \
            -e RUN_ID \
            -v $GITHUB_WORKSPACE/results:/app/data/results \
            $MS_DOCKER_IMAGE \
            moonshot run "$RUN_ID" qa-tests my-gpt-4o-mini

      - name: Show results
        run: |
          if [ -f "$GITHUB_WORKSPACE/results/$RUN_ID.json" ]; then
            cat "$GITHUB_WORKSPACE/results/$RUN_ID.json"
          else
            echo "File not found: $GITHUB_WORKSPACE/results/$RUN_ID.json"
            ls -l "$GITHUB_WORKSPACE/results"
          fi

      - name: Upload Moonshot Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: results/*
