name: Moonshot Testing

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: read

jobs:
  run-moonshot-in-ci:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      # 1. Checkout the repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Build and start Quart container
      - name: Build Quart Docker container
        run: docker build -t quart-app .

      - name: Run Quart container
        run: |
          docker run -d --name quart-app -p 3123:3123 quart-app
          echo "quart container started"

      # 3. Wait for Quart to be ready
      - name: Wait for Quart health check
        run: |
          for i in {1..10}; do
            if curl -s -f http://localhost:3123/; then
              echo "Quart ready"
              break
            fi
            sleep 2
          done

      # 4. Set RUN_ID
      - name: Set RUN_ID
        run: echo "RUN_ID=moonshot-testing-run-$(date +'%m%d%y-%H%M')" >> $GITHUB_ENV

      # 5. Run Moonshot inside its container
      - name: Run Moonshot in Docker container
        run: |
          docker run --rm \
            -v $GITHUB_WORKSPACE:/app \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_TOKEN }}" \
            -e AZURE_BLOB_STORAGE_URL="${{ secrets.AZURE_BLOB_STORAGE_URL }}" \
            -e AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
            -e AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" \
            -e AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}" \
            -e MS_TEST_CONFIG_PATH="${{ secrets.AZURE_MS_TEST_CONFIG_PATH }}" \
            -e MS_CONFIG_PATH="${{ secrets.AZURE_MS_CONFIG_PATH }}" \
            -e RUN_ID="$RUN_ID" \
            -p 3123:3123 \
            moonshotseanyctest-czgbd0c4dadjgmg2.azurecr.io/moonshot:latest \
            bash -c "cd /app && moonshot run \"$RUN_ID\" qa-tests my-custom-connector"

      # 6. Copy results
      - name: Copy Results
        run: cp -r $GITHUB_WORKSPACE/data/results $GITHUB_WORKSPACE/results

      # 7. Show results
      - name: Show results
        run: |
          if [ -f "$GITHUB_WORKSPACE/results/$RUN_ID.json" ]; then
            cat "$GITHUB_WORKSPACE/results/$RUN_ID.json"
          else
            echo "File not found: $GITHUB_WORKSPACE/results/$RUN_ID.json"
            ls -l "$GITHUB_WORKSPACE/results"
          fi

      # 8. Add results to job summary
      - name: Add Results to Job Summary (Python)
        run: |
          echo "## Moonshot Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Metric | Pass Rate % | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------------|--------|" >> $GITHUB_STEP_SUMMARY

          python3 <<'EOF' >> $GITHUB_STEP_SUMMARY
          import json
          import os

          run_id = os.environ["RUN_ID"]
          results_file = f"{os.environ['GITHUB_WORKSPACE']}/results/{run_id}.json"

          with open(results_file, "r") as f:
              data = json.load(f)

          for run in data.get("run_results", []):
              test_name = run["metadata"]["test_name"]
              metric = run["metadata"]["metric"]["name"]
              rate = run["results"]["evaluation_summary"]["refusal"]["attack_success_rate"]

              for r in run["results"]["individual_results"].get("refuse", []):
                  result = r["evaluated_result"]["evaluated_response"]
                  print(f"| {test_name} | {metric} | {rate} | {result} |")
          EOF

      # 9. Upload results
      - name: Upload Moonshot Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: $GITHUB_WORKSPACE/data/results/*
