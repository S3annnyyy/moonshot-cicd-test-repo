name: Moonshot Testing

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  packages: read

jobs:
  moonshot-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # --- Quart setup ---
      - name: Build Quart Docker image
        run: docker build -t quart-app:latest .

      - name: Run Quart container
        run: |
          docker run -d --name quart-app -p 3123:3123 quart-app:latest
          echo "Quart container started"

      - name: Wait for Quart to be ready
        run: |
          for i in {1..10}; do
            if curl -s -f http://localhost:3123/; then
              echo "Quart ready"
              break
            fi
            sleep 2
          done

      # --- Moonshot test run ---
      - name: Pull Moonshot container
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login moonshotseanyctest-czgbd0c4dadjgmg2.azurecr.io \
            -u "${{ secrets.ACR_USERNAME }}" --password-stdin
          docker pull moonshotseanyctest-czgbd0c4dadjgmg2.azurecr.io/moonshot:latest

      - name: Run Moonshot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          AZURE_BLOB_STORAGE_URL: ${{ secrets.AZURE_BLOB_STORAGE_URL }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          MS_TEST_CONFIG_PATH: ${{ secrets.AZURE_MS_TEST_CONFIG_PATH }}
          MS_CONFIG_PATH: ${{ secrets.AZURE_MS_CONFIG_PATH }}
        run: |
          RUN_ID="moonshot-testing-run-$(date +'%m%d%y-%H%M')"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

          docker run --rm \
            --network host \
            -e OPENAI_API_KEY \
            -e AZURE_BLOB_STORAGE_URL \
            -e AZURE_CLIENT_ID \
            -e AZURE_TENANT_ID \
            -e AZURE_CLIENT_SECRET \
            -e MS_TEST_CONFIG_PATH \
            -e MS_CONFIG_PATH \
            -e RUN_ID \
            -v $GITHUB_WORKSPACE/results:/app/data/results \
            moonshotseanyctest-czgbd0c4dadjgmg2.azurecr.io/moonshot:latest \
            moonshot run "$RUN_ID" qa-tests my-custom-connector

      # --- Results handling ---
      - name: Show results
        run: |
          if [ -f "$GITHUB_WORKSPACE/results/$RUN_ID.json" ]; then
            cat "$GITHUB_WORKSPACE/results/$RUN_ID.json"
          else
            echo "File not found: $GITHUB_WORKSPACE/results/$RUN_ID.json"
            ls -l "$GITHUB_WORKSPACE/results"
          fi

      - name: Add Results to Job Summary (Python)
        run: |
          echo "## Moonshot Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Name | Metric | Pass Rate % | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------------|--------|" >> $GITHUB_STEP_SUMMARY

          python3 <<'EOF' >> $GITHUB_STEP_SUMMARY
          import json, os
          run_id = os.environ["RUN_ID"]
          results_file = f"{os.environ['GITHUB_WORKSPACE']}/results/{run_id}.json"
          with open(results_file, "r") as f:
              data = json.load(f)
          for run in data.get("run_results", []):
              test_name = run["metadata"]["test_name"]
              metric = run["metadata"]["metric"]["name"]
              rate = run["results"]["evaluation_summary"]["refusal"]["attack_success_rate"]
              for r in run["results"]["individual_results"].get("refuse", []):
                  result = r["evaluated_result"]["evaluated_response"]
                  print(f"| {test_name} | {metric} | {rate} | {result} |")
          EOF

      - name: Upload Moonshot Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: results/*

# name: Moonshot Testing

# on:
#   push:
#     branches:
#       - main

# permissions:
#   id-token: write
#   contents: read
#   packages: read

# jobs:
#   setup-quart-localhost-sever:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4

#       - name: Build quart Docker container
#         run: |
#           docker build -t quart-app .

#       - name: Run quart container
#         run: |
#           docker run -d --name quart-app -p 3123:3123 quart-app
#           echo "quart container started"

#       - name: Wait for health check and set quart URL
#         id: set_url
#         run: |
#           for i in {1..10}; do
#             if curl -s -f http://localhost:3123/; then
#               echo "quart ready"
#               break
#             fi
#             sleep 2
#           done
#           echo "quart_url=http://localhost:3123" >> $GITHUB_OUTPUT

#   run-moonshot-in-ci:
#     runs-on: ubuntu-latest
#     environment: dev
#     container:
#       image: moonshotseanyctest-czgbd0c4dadjgmg2.azurecr.io/moonshot:latest
#       credentials:
#         username: ${{ secrets.ACR_USERNAME }}   
#         password: ${{ secrets.ACR_PASSWORD }} 
#     steps:
#       - name: Set RUN_ID
#         run: echo "RUN_ID=moonshot-testing-run-$(date +'%m%d%y-%H%M')" >> $GITHUB_ENV

#       - name: Run Moonshot 
#         run: |
#           cd /app
#           export OPENAI_API_KEY="${{ secrets.OPENAI_TOKEN }}"
#           export AZURE_BLOB_STORAGE_URL="${{ secrets.AZURE_BLOB_STORAGE_URL }}"
#           export AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
#           export AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
#           export AZURE_CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}"
#           export MS_TEST_CONFIG_PATH="${{ secrets.AZURE_MS_TEST_CONFIG_PATH }}"
#           export MS_CONFIG_PATH="${{ secrets.AZURE_MS_CONFIG_PATH }}"

#           moonshot run "$RUN_ID" qa-tests my-custom-connector
      
#       - name: Copy Results
#         run: cp -r /app/data/results $GITHUB_WORKSPACE/results
      
#       - name: Show results
#         run: |
#           if [ -f "$GITHUB_WORKSPACE/results/$RUN_ID.json" ]; then
#             cat "$GITHUB_WORKSPACE/results/$RUN_ID.json"
#           else
#             echo "File not found: $GITHUB_WORKSPACE/results/$RUN_ID.json"
#             ls -l "$GITHUB_WORKSPACE/results"
#           fi

#       - name: Add Results to Job Summary (Python)
#         run: |
#           echo "## Moonshot Test Results" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "| Test Name | Metric | Pass Rate % | Result |" >> $GITHUB_STEP_SUMMARY
#           echo "|-----------|--------|-------------|--------|" >> $GITHUB_STEP_SUMMARY

#           python3 <<'EOF' >> $GITHUB_STEP_SUMMARY
#           import json
#           import os

#           run_id = os.environ["RUN_ID"]
#           results_file = f"{os.environ['GITHUB_WORKSPACE']}/results/{run_id}.json"

#           with open(results_file, "r") as f:
#               data = json.load(f)

#           for run in data.get("run_results", []):
#               test_name = run["metadata"]["test_name"]
#               metric = run["metadata"]["metric"]["name"]
#               rate = run["results"]["evaluation_summary"]["refusal"]["attack_success_rate"]

#               for r in run["results"]["individual_results"].get("refuse", []):
#                   result = r["evaluated_result"]["evaluated_response"]
#                   print(f"| {test_name} | {metric} | {rate} | {result} |")
#           EOF

      
#       - name: Upload Moonshot Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: /app/data/results/*  
        
